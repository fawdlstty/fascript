//! A rule for fa programming language

WHITESPACE = _{ " " | "\t" }
COMMENT    = _{ ("//" ~ (!NEWLINE ~ ANY)*) | ("/*" ~ (!"*/" ~ ANY)* ~ "*/") }
LINE       = _{ (";" | NEWLINE)+ }
COMMA      = _{ "," ~ LINE? }
QYUAN_L    = _{ "(" ~ LINE? }
QYUAN_R    = _{ LINE? ~ ")" }
QFANG_L    = _{ "[" ~ LINE? }
QFANG_R    = _{ LINE? ~ "]" }
QHUA_L     = _{ "{" ~ LINE? }
QHUA_R     = _{ LINE? ~ "}" }
QJIAN_L    = _{ "<" ~ LINE? }
QJIAN_R    = _{ LINE? ~ ">" }
CHAR       = @{ 'A'..'Z' | 'a'..'z' | "_" }
NCHAR      = @{ CHAR | NUM_CHAR }
NUM_CHAR   = @{ '0'..'9' }
NUM_BASE   = @{ NUM_CHAR ~ ("_" | NUM_CHAR)* }

NullLiteral   =  { "null" }
NumberLiteral = @{ "-"? ~ NUM_BASE ~ ("." ~ NUM_BASE)? }
BoolLiteral   =  { "true" | "false" }
StringLiteral = @{ "\"" ~ ("\\\"" | (!"\"" ~ ANY))* ~ "\"" }
Literal       =  { NullLiteral | NumberLiteral | BoolLiteral | StringLiteral }

Id  = @{ CHAR ~ NCHAR* }
Ids =  { (Id ~ ".")* ~ Id }

MapType     = { "map" ~ (QJIAN_L ~ Type ~ COMMA ~ Type ~ QJIAN_R)? }
TupleType   = { QYUAN_L ~ (Type ~ COMMA)+ ~ Type ~ QYUAN_R }
FuncType    = { "func" ~ QJIAN_L ~ (Type ~ COMMA)* ~ Type ~ QJIAN_R }
BaseTypeStr = { "bool" | "dynamic" | "float" | "int" | "string" | "task" }
BaseType    = { BaseTypeStr | MapType | TupleType | FuncType }
VoidType    = { "void" }
TypeSuffix  = { "[]" | "?" }
Type        = { VoidType | (BaseType ~ TypeSuffix*) }

Expr1                     = { BaseExpr }
Expr2                     = { BaseExpr }
IndexExpr                 = { Expr1? ~ ".." ~ Expr2? }
Args                      = { QYUAN_L ~ ((Id ~ COMMA)? ~ Id)? ~ QYUAN_R }
FuncBody                  = { ("=>" ~ Expr) | (QHUA_L ~ Stmts ~ QHUA_R) }
LambdaExpr                = { (Id | Args) ~ FuncBody }
NewExpr                   = { QHUA_L ~ TuplePair ~ (COMMA ~ TuplePair)* ~ QHUA_R }
TuplePair                 = { Id ~ ":" ~ Expr }
TupleExpr                 = { QYUAN_L ~ TuplePair ~ (COMMA ~ TuplePair)* ~ QYUAN_R }
QuotExpr                  = { QYUAN_L ~ Expr ~ QYUAN_R }
ArrayExpr                 = { QFANG_L ~ (IndexExpr | Expr) ~ QFANG_R }
BaseExpr                  = { Literal | NewExpr | LambdaExpr | TupleExpr | QuotExpr | Id | ArrayExpr }
BaseExprPrefix            = { BaseExprPrefixBase | BaseExprPrefixAwait }
BaseExprPrefixBase        = { "++" | "--" | "-" | "~" | "!" }
BaseExprPrefixAwait       = { "await" ~ ("(" ~ MiddleExpr ~ ")")? }
BaseExprSuffixBase        = { "++" | "--" }
BaseExprSuffixInvoke      = { QYUAN_L ~ (Expr ~ (COMMA ~ Expr)*)? ~ QYUAN_R }
BaseExprSuffixArrayAccess = { QFANG_L ~ IndexExpr ~ QFANG_R }
BaseExprSuffixAccess      = { "." ~ Id }
BaseExprSuffix            = {
    BaseExprSuffixBase
  | BaseExprSuffixInvoke
  | BaseExprSuffixArrayAccess
  | BaseExprSuffixAccess
}
StrongExpr                = { BaseExprPrefix* ~ BaseExpr ~ BaseExprSuffix* }
Middle3OpExpr             = { StrongExpr ~ "?" ~ StrongExpr ~ ":" ~ StrongExpr }
CalcOp                    = { "+" | "-" | "*" | "/" | "**" | "%" | "|" | "&" | "^" | "&&" | "||" | "<<" | ">>" | ">" | ">=" | "<" | "<=" | "==" | "!=" | "??" }
AssignOp                  = { "=" | "+=" | "-=" | "*=" | "/=" | "**=" | "%=" | "|=" | "&=" | "^=" | "&&=" | "||=" | "<<=" | ">>=" | "??=" }
Middle2OpExpr             = { StrongExpr ~ (CalcOp ~ StrongExpr)* }
AwaitExpr                 = { "await" ~ StrongExpr }
MiddleExpr                = { Middle3OpExpr | Middle2OpExpr | AwaitExpr }
NameExpr                  = { Ids }
Expr                      = { (NameExpr ~ AssignOp)* ~ MiddleExpr }

LoopLabel      = { Id }
CmdStmtName    = { "return" | "abort" | "report" }
CmdStmt        = { CmdStmtName ~ MiddleExpr? }
ForStmt        = { (LoopLabel ~ ":")? ~ "for" ~ Id ~ "in" ~ (IndexExpr | MiddleExpr) ~ QHUA_L ~ Stmts ~ QHUA_R }
IfPart         = { "if" ~ MiddleExpr ~ QHUA_L ~ Stmts ~ QHUA_R }
IfEndPart      = { QHUA_L ~ Stmts ~ QHUA_R }
IfStmt         = { IfPart ~ ("else" ~ IfPart)* ~ ("else" ~ IfEndPart)? }
BreakStmt      = { "break" ~ Id? }
ContinueStmt   = { "continue" ~ Id? }
DoWhileStmt    = { "do" ~ QHUA_L ~ Stmts ~ QHUA_R ~ "while" ~ MiddleExpr }
WhileStmt      = { "while" ~ MiddleExpr ~ QHUA_L ~ Stmts ~ QHUA_R }
DefVarItemPart = { Id ~ "=" ~ MiddleExpr }
DefVarStmt     = { "var" ~ DefVarItemPart ~ ("," ~ DefVarItemPart)* }
ExprStmt       = { Expr }
FuncStmt       = { "func" ~ Id ~ Args ~ FuncBody }
AnnoPart       = { "@" ~ Id ~ "=" ~ MiddleExpr ~ LINE }
TaskStmt       = { AnnoPart* ~ "task" ~ Id ~ Args ~ FuncBody }
Stmt           = { CmdStmt | ForStmt | IfStmt | BreakStmt | ContinueStmt | DoWhileStmt | WhileStmt | DefVarStmt | ExprStmt | FuncStmt | TaskStmt }
Stmts          = { LINE? ~ (Stmt ~ LINE)* ~ Stmt? ~ LINE? }

ProgramFile = { SOI ~ LINE? ~ Stmts ~ EOI }
